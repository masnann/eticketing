// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	entities "eticketing/module/entities"
	domain "eticketing/module/feature/schedule/domain"

	mock "github.com/stretchr/testify/mock"
)

// ScheduleServiceInterface is an autogenerated mock type for the ScheduleServiceInterface type
type ScheduleServiceInterface struct {
	mock.Mock
}

// CreateSchedule provides a mock function with given fields: req
func (_m *ScheduleServiceInterface) CreateSchedule(req *domain.CreateScheduleRequest) (*entities.ScheduleModels, error) {
	ret := _m.Called(req)

	var r0 *entities.ScheduleModels
	var r1 error
	if rf, ok := ret.Get(0).(func(*domain.CreateScheduleRequest) (*entities.ScheduleModels, error)); ok {
		return rf(req)
	}
	if rf, ok := ret.Get(0).(func(*domain.CreateScheduleRequest) *entities.ScheduleModels); ok {
		r0 = rf(req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.ScheduleModels)
		}
	}

	if rf, ok := ret.Get(1).(func(*domain.CreateScheduleRequest) error); ok {
		r1 = rf(req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteSchedule provides a mock function with given fields: scheduleID
func (_m *ScheduleServiceInterface) DeleteSchedule(scheduleID uint64) error {
	ret := _m.Called(scheduleID)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint64) error); ok {
		r0 = rf(scheduleID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAllSchedules provides a mock function with given fields: page, pageSize
func (_m *ScheduleServiceInterface) GetAllSchedules(page int, pageSize int) ([]*entities.ScheduleModels, int64, error) {
	ret := _m.Called(page, pageSize)

	var r0 []*entities.ScheduleModels
	var r1 int64
	var r2 error
	if rf, ok := ret.Get(0).(func(int, int) ([]*entities.ScheduleModels, int64, error)); ok {
		return rf(page, pageSize)
	}
	if rf, ok := ret.Get(0).(func(int, int) []*entities.ScheduleModels); ok {
		r0 = rf(page, pageSize)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entities.ScheduleModels)
		}
	}

	if rf, ok := ret.Get(1).(func(int, int) int64); ok {
		r1 = rf(page, pageSize)
	} else {
		r1 = ret.Get(1).(int64)
	}

	if rf, ok := ret.Get(2).(func(int, int) error); ok {
		r2 = rf(page, pageSize)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetSchedulePage provides a mock function with given fields: currentPage, pageSize, totalItems
func (_m *ScheduleServiceInterface) GetSchedulePage(currentPage int, pageSize int, totalItems int) (int, int, int, error) {
	ret := _m.Called(currentPage, pageSize, totalItems)

	var r0 int
	var r1 int
	var r2 int
	var r3 error
	if rf, ok := ret.Get(0).(func(int, int, int) (int, int, int, error)); ok {
		return rf(currentPage, pageSize, totalItems)
	}
	if rf, ok := ret.Get(0).(func(int, int, int) int); ok {
		r0 = rf(currentPage, pageSize, totalItems)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(int, int, int) int); ok {
		r1 = rf(currentPage, pageSize, totalItems)
	} else {
		r1 = ret.Get(1).(int)
	}

	if rf, ok := ret.Get(2).(func(int, int, int) int); ok {
		r2 = rf(currentPage, pageSize, totalItems)
	} else {
		r2 = ret.Get(2).(int)
	}

	if rf, ok := ret.Get(3).(func(int, int, int) error); ok {
		r3 = rf(currentPage, pageSize, totalItems)
	} else {
		r3 = ret.Error(3)
	}

	return r0, r1, r2, r3
}

// UpdateSchedule provides a mock function with given fields: scheduleID, req
func (_m *ScheduleServiceInterface) UpdateSchedule(scheduleID uint64, req *domain.UpdateScheduleRequest) error {
	ret := _m.Called(scheduleID, req)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint64, *domain.UpdateScheduleRequest) error); ok {
		r0 = rf(scheduleID, req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewScheduleServiceInterface creates a new instance of ScheduleServiceInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewScheduleServiceInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *ScheduleServiceInterface {
	mock := &ScheduleServiceInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
