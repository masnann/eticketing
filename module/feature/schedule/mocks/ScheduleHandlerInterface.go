// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	fiber "github.com/gofiber/fiber/v2"
	mock "github.com/stretchr/testify/mock"
)

// ScheduleHandlerInterface is an autogenerated mock type for the ScheduleHandlerInterface type
type ScheduleHandlerInterface struct {
	mock.Mock
}

// CreateSchedule provides a mock function with given fields: c
func (_m *ScheduleHandlerInterface) CreateSchedule(c *fiber.Ctx) error {
	ret := _m.Called(c)

	var r0 error
	if rf, ok := ret.Get(0).(func(*fiber.Ctx) error); ok {
		r0 = rf(c)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteSchedule provides a mock function with given fields: c
func (_m *ScheduleHandlerInterface) DeleteSchedule(c *fiber.Ctx) error {
	ret := _m.Called(c)

	var r0 error
	if rf, ok := ret.Get(0).(func(*fiber.Ctx) error); ok {
		r0 = rf(c)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAllSchedules provides a mock function with given fields: c
func (_m *ScheduleHandlerInterface) GetAllSchedules(c *fiber.Ctx) error {
	ret := _m.Called(c)

	var r0 error
	if rf, ok := ret.Get(0).(func(*fiber.Ctx) error); ok {
		r0 = rf(c)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateSchedule provides a mock function with given fields: c
func (_m *ScheduleHandlerInterface) UpdateSchedule(c *fiber.Ctx) error {
	ret := _m.Called(c)

	var r0 error
	if rf, ok := ret.Get(0).(func(*fiber.Ctx) error); ok {
		r0 = rf(c)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewScheduleHandlerInterface creates a new instance of ScheduleHandlerInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewScheduleHandlerInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *ScheduleHandlerInterface {
	mock := &ScheduleHandlerInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
